Proceedings of the Twentieth International Conference on Automated Planning and Scheduling (ICAPS 2010)

When Abstractions Met Landmarks
Carmel Domshlak and Michael Katz and Sagi Leﬂer∗
Faculty of Industrial Engineering and Management Technion—Israel Institute of Technology Haifa, Israel

Abstract
Abstractions and landmarks are two powerful mechanisms for devising admissible heuristics for classical planning. Here we aim at putting them together by integrating landmark information into abstractions, and propose a concrete realization of this direction suitable for structural-pattern abstractions, as well as for other abstraction heuristics. Our empirical evaluation shows that landmark information can substantially improve the quality of abstraction heuristic estimates.

Introduction
Heuristic state-space search is a common and successful approach to classical planning, and in particular, to costoptimal classical planning. Apart from the choice of the search algorithm, heuristic-search solvers for cost-optimal planning differ mainly in their admissible heuristic estimators. Recent years have seen a growing body of work on expanding the palette of heuristic estimators, with most (if not all) current admissible heuristics being based on one of the following three ideas: 1. critical paths: the hm heuristic family (Haslum and Geffner 2000), with the h1 ≡ hmax member being closely related to the delete relaxation idea, 2. abstractions: pattern databases (Edelkamp 2001), mergeand-shrink abstractions (Helmert, Haslum, and Hoffmann 2007), and structural patterns (Katz and Domshlak 2008b), 3. landmarks: the admissible landmark heuristics hL and hLA (Karpas and Domshlak 2009), and hLM-cut (Helmert and Domshlak 2009), with all three being also closely related to delete relaxation. Until very recently, these three ideas have been developed in relative isolation, and thus there has been no crossfertilization between them. In a recent work aiming at connecting between the different approaches, Helmert and Domshlak (2009) in particular show that additive hmax and admissible landmark heuristics are in fact very much related.
∗ The work of the authors was partly supported by Israel Science Foundation grant 670/07. Copyright c 2010, Association for the Advancement of Artiﬁcial Intelligence (www.aaai.org). All rights reserved.

This realization allowed the authors to develop a novel admissible landmark heuristic, hLM-cut , that has dramatically changed the state of the art in performance for cost-optimal planning. In this work we consider another edge of the above triangle of ideas, namely abstractions and landmarks, and try to exploit the best of both worlds by fertilizing the former with the latter. In general, abstraction heuristics have been shown by Helmert and Domshlak (2009) to be more expressive (in a proper sense of this notion) than landmark heuristics. However, all the currently used mechanisms for devising abstraction heuristics appear to be quite dependent on the richness of the goal description that comes with the problem speciﬁcation. Informally, the fewer the sub-goals explicitly mentioned by the problem, the less guided (and thus potentially less effective) are the procedures for selecting concrete sets of abstractions. Our empirical evaluation of this issue described at the beginning of the paper clearly exempliﬁes this dependence. In this work we tackle precisely this Achilles heel of automatically devised abstractions, and show how problem’s landmarks can be used to substantially cure it. • We show how landmarks, constituting implicit sub-goals of the problem, can be exploited in enhancing abstraction heuristics by compiling the landmarks into the problem speciﬁcation. The proposed problem compilation is extremely simple, yet it preserves all the essential reachability properties of the original problem, and results in boosting substantially the quality of the induced heuristic estimates. Focusing on fork-decomposition structural patterns (Katz and Domshlak 2008b) we also show that some investment in action-cost partitioning improves the informativeness of the landmark-enhanced abstractions even further. • We both investigate the straightforward approach of directly solving the landmark enhanced problem, as well as propose a novel approach of searching for plans in the state space of the original problem while estimating the search nodes via their mappings to the landmark enhanced problem. The latter demands maintaining information about the achievement of the landmarks during the search, and thus the LM-A∗ algorithm (Karpas and Domshlak 2009) is used. Our empirical evaluation clearly

50

testiﬁes for the higher effectiveness of the latter approach.

Preliminaries
We consider classical planning tasks corresponding to state models with single initial state and only deterministic actions; here we consider state models captured by the SAS+ formalism (B¨ ckstr¨ m and Nebel 1995) with non-negative a o action costs. Such a planning task is given by a quintuple Π = V , A, I , G, cost , where: • V is a set of state variables, each v ∈ V is associated with a ﬁnite domain dom(v); each complete assignment to V is called a state, and S = dom(V ) is the state space of Π. I is an initial state. The goal G is a partial assignment to V ; a state s is a goal state iff G ⊆ s. • A is a ﬁnite set of actions. Each action a is a pair pre(a), eﬀ(a) of partial assignments to V called preconditions and effects, respectively. cost : A → R0+ is a real-valued, non-negative action cost function. The value of a variable v in a partial assignment p is denoted by p[v]. By V (p) ⊆ V we denote the set of variables instantiated by p. An action a is applicable in a state s iff s[v] = pre(a)[v] for all v ∈ V (pre(a)). Applying a changes the value of each v ∈ V (eﬀ(a)) to eﬀ(a)[v]. The resulting state is denoted by s a ; by s a1 , . . . , ak we denote the state obtained from sequential application of the (respectively applicable) actions a1 , . . . , ak starting at state s. Such an action sequence is an s-plan if G ⊆ s a1 , . . . , ak , and it is a cost-optimal (or, in what follows, optimal) s-plan if the sum of its action costs is minimal among all s-plans. The purpose of (optimal) planning is ﬁnding an (optimal) I-plan. For a pair of states s1 , s2 ∈ S, by cost(s1 , s2 ) we refer to the cost of a cheapest action sequence taking us from s1 to s2 in the state model of Π; h∗ (s) = mins ⊇G cost(s, s ) is the custom notation for the cost of optimal s-plans for Π. Finally, we refer later on to the causal graphs induced by the planning tasks. The causal graph of a task Π = V, A, I, G, cost is a digraph over the nodes V . An arc (v, v ) belongs to the causal graph iff v = v and there exists an action a ∈ A such that v ∈ V (eﬀ(a)) and v ∈ V (eﬀ(a)) ∪ V (pre(a)). Let Π = V , A, I , G, cost be a planning task, F = v∈V dom(v) be the set of facts (assuming name uniqueness), φ be a propositional logic formula over facts F , π = a1 , . . . , ak be an action sequence applicable in I, and 0 ≤ i ≤ k. Following the terminology of Hoffmann et al. 2004, we say that φ is true at time i in π iff I a1 , . . . , ai |= φ, and φ is a landmark of Π iff in each I-plan for Π, it is true at some time. While landmarks can be any formulas over facts, we restrict our attention to disjunctions of facts, and use notation φ ⊆ F to denote “disjunction over the fact subset φ of F ”. This restriction covers all the landmark discovery procedures suggested in the literature. Due to hardness of deciding even that a single fact is a landmark (Porteous, Sebastia, and Hoffmann 2001), practical methods for ﬁnding landmarks are either incomplete or unsound. In what follows we assume access to a sound such procedure; in particular, in our empirical evaluation reported here we use

LAMA’s sound landmark discovery procedure by Richter et al. (2008). In general, however, the actual way of discovering landmarks is tangential to our work. Landmarks are exploited these days in both satisﬁcing and optimal planning as heuristic search, either for devising an incremental, landmark-by-landmark search strategy (Hoffmann, Porteous, and Sebastia 2004) or for deriving heuristic estimates (Richter, Helmert, and Westphal 2008; Karpas and Domshlak 2009; Helmert and Domshlak 2009). In parallel, other sources of information for heuristic guidance have been proven extremely valuable, and this in particular so with various problem abstractions. An abstraction heuristic is based on mapping Π’s transition system over states S to an abstract transition system over states S α . The mapping is deﬁned by an abstraction function α : S → S α that guarantees costα (α(s), α(s )) ≤ cost(s, s ) for all states s, s ∈ S. The abstraction heuristic hα (s) is then the distance from α(s) to the closest abstract goal state. Abstraction heuristics are always admissible by their very deﬁnition. Two families of abstractions are used these days for deriving admissible heuristics: abstractions such as in pattern databases (Edelkamp 2001; Haslum et al. 2007) and merge-and-shrink (Helmert, Haslum, and Hoffmann 2007) are represented explicitly by their induced transition systems, while structural patterns (Katz and Domshlak 2008b; 2009) correspond to implicitly represented abstractions.

Abstractions and Goal Sensitivity
One key feature of abstraction heuristics is that typically there is a great degree of ﬂexibility in abstraction selection. This ﬂexibility is a mixed blessing because the choice of abstraction may dramatically affect the quality of the heuristic estimate, while homing in on a better/best choice is not easy. A closer look at some successful approaches to both (explicit) pattern database abstractions and (implicit) structural pattern abstractions reveals some commonality in their strategies to resolve that choice dilemma. When a set of pattern databases is selected, the farther state variables are from the goal-mentioned variables V (G) in the causal graph of the problem, the more they are likely to be abstracted away (ignored) altogether. The picture with the fork-decomposition structural patterns is very much similar. While there is not much room for ﬂexibility in selecting such structural patterns, the size of the patterns’ set, and thus the quality of the resulting heuristic, depend crucially on the number of goal-mentioned variables. The situation with the merge-and-shrink abstractions is a bit more complicated to frame, but the concrete merge-and-shrink procedure suggested and evaluated by Helmert et al. (2007) also puts more focus on the goal-mentioned variables and their close ancestors in the causal graph. This dependence of some abstraction heuristics on the size of V (G) is quite problematic as any SAS+ planning task can easily be reformulated to contain just a single goalmentioned variable. To evaluate this dependence empirically, we have conducted a targeted evaluation on a wide sample of planning domains from the International Planning Competitions (IPC) 1998-2006. We have focused on two

51

domain (D) airport-ipc4 blocks-ipc2 depots-ipc3 driverlog-ipc3 freecell-ipc3 grid-ipc1 gripper-ipc1 logistics-ipc1 logistics-ipc2 miconic-strips-ipc2 mprime-ipc1 mystery-ipc1 openstacks-ipc5 pathways-ipc5 pipesworld-notankage-ipc4 pipesworld-tankage-ipc4 psr-small-ipc4 rovers-ipc5 satellite-ipc4 schedule-strips tpp-ipc5 trucks-ipc5 zenotravel-ipc3

S(D) 20 21 7 12 5 2 7 6 22 55 23 21 7 4 21 14 50 6 6 46 6 6 11 378

Π1 16 18 5 11 5 2 7 4 16 50 20 17 7 4 17 11 50 6 6 15 6 6 9 308

Π 17 18 7 12 4 2 7 4 16 55 21 17 7 4 21 13 50 6 6 19 6 5 11 328

MS-104 SB E(Π1 ) 16 14.60 18 7.29 5 3.22 11 2.59 4 2.47 2 1.53 7 7.00 4 3.43 16 6.18 50 29.78 20 19.12 17 16.57 7 6.91 4 3.13 17 9.93 11 4.91 50 37.92 6 5.59 6 5.37 14 14.00 6 5.99 5 5.00 9 7.05 305 219.57

E(Π) 15.96 18.00 4.88 11.00 3.93 2.00 6.45 3.03 16.00 50.00 19.79 16.22 7.00 3.42 14.32 10.11 50.00 5.79 5.04 14.00 6.00 2.01 7.86 292.81

Π1 17 18 4 10 5 1 7 2 10 50 20 18 7 4 13 8 49 6 6 46 6 6 8 321

Π 20 21 7 12 5 2 7 6 22 51 23 21 7 4 16 10 49 6 6 46 6 6 11 364

hF
SB 17 18 4 10 5 1 7 2 10 50 20 18 7 4 13 8 49 6 6 46 6 6 8 321

E(Π1 ) 10.68 3.83 0.88 1.84 2.53 0.09 6.91 0.01 0.07 30.51 1.56 4.84 4.24 4.00 7.77 5.15 41.17 2.46 2.93 34.95 2.33 2.95 2.06 173.74

E(Π) 17.00 18.00 4.00 10.00 5.00 1.00 7.00 2.00 10.00 50.00 20.00 18.00 7.00 4.00 13.00 8.00 49.00 6.00 6.00 39.03 6.00 6.00 8.00 314.03

Table 1: Evaluation of the impact of goal reformulation on merge-and-shrink and fork-decomposition heuristics. Per heuristic, the ﬁrst three columns capture the number of solved tasks under original formulation (Π), single-goal reformulation (Π1 ), and under both formulations (SB). The last row in these columns captures the total number of solved planning tasks. The last two columns per heuristic depict the measure of success in terms of expanded nodes, with each entry being the sum of our measure over all the tasks in the domain solved under both formulations. The last row in those columns provides the overall measures. abstraction heuristics, namely merge-and-shrink (Helmert, Haslum, and Hoffmann 2007) with 104 abstract states for explicit abstractions and the structural-pattern database version of the hF heuristic (Katz and Domshlak 2009) for implicit abstractions. Both these heuristics have been implemented within a standard heuristic forward search framework of the Fast Downward planner (Helmert 2006), and A∗ algorithm with full duplicate elimination was used. All the experiments were run on a 3GHz Intel E8400 CPU; the time and memory limits were set to 30 minutes and 1.5 GB, respectively. In terms of expanded nodes, Table 1 shows that the accuracy of the abstraction heuristics on the original tasks is substantially higher than this on the single-goal reformulations. The speciﬁc measure for comparison is as follows. For each of the two problem formulations, each task contributes a value equal the minimal number of expanded nodes among the two formulations divided by the number of expanded nodes under the respective formulation. If the denominator is 0 (if, e.g., the initial state is a goal state, or the heuristic estimate of the initial state is ∞), then this value is deﬁned to be 1. As we are interested in comparing expanded nodes, we account only for tasks solved under both formulations, and thus the nominator is always well-deﬁned. Each task grants the winning formulation the value of 1, and the other formulation a value in [0, 1]. For example, if A∗ on Π1 opens 1000 nodes and on Π it opens 3000 nodes, then Π contributes 1 to the measure E(Π1 ) and 1/3 to E(Π). The last row in the table sums up these values over all tasks solved under both problem formulations. Note that, while both merge-and-shrink and fork-decomposition heuristics got hurt by ”hiding” the goals of the tasks, the degradation in accuracy of the forkdecomposition heuristic was much higher due to its explicit reliance on the richness of goal speciﬁcation in the task.

Bringing Landmarks into Abstractions
We now proceed with, ﬁrst, arguing that landmarks have a natural potential to enhance abstraction heuristics by targeting one of the major sources of their vulnerability. We then describe a simple technique for enhancing a planning task with landmark information, and evaluate and discuss two ways of exploiting this enhancement in abstraction based heuristic search optimal planning. Here as well, our empirical evaluation of the framework is focused on two representatives of abstraction heuristics: merge-andshrinks (Helmert, Haslum, and Hoffmann 2007) for explicit abstractions and fork-decomposition (Katz and Domshlak 2009) for implicit abstractions. Revisiting our experiment with ”hiding” the goals of the planning tasks, it is clear that things that were goals before the reformulation do not really cease to be goals, but only become implicit goals. In fact, this is just one type of possible implicit goals; in particular, any landmark is such an implicit goal by its very deﬁnition. Given that many such de facto goals are not explicitly given in the description of the planning task, it is only natural to explore the possibility of converting some (discoverable) implicit goals to explicit goals. Probably the most direct way to achieve that is via a speciﬁc notion of one-sided equivalence between planning tasks which we call surrogate. For a planning task Π, let ΦΠ denote the set of all optimal plans for Π. Given two planning tasks Π and Π , we say that Π is a surrogate of Π if (i) ΦΠ = ∅ iff ΦΠ = ∅, (ii) there exists a mapping f : ΦΠ → ΦΠ such that, for any ρ ∈ ΦΠ , f (ρ ) can be computed in time polynomial in ||Π||, ||ρ ||, and ||f (ρ )||. Note that, if Π is a surrogate of Π, then instead of optimally solving Π, one can optimally solve Π , and then

52

reconstruct an optimal plan for Π from the obtained plan for Π . This is precisely what we suggest to exploit using what we call direct landmark-based surrogates. Given a planning task Π = V , A, I , G, cost , and a set of initially unachieved (that is, not true in I) disjunctive landmarks L ⊆ 2F of Π, the direct landmark-based surrogate ΠL = V L , AL , I L , GL , costL of Π is constructively deﬁned as follows.1 • For each landmark φ ∈ L, we introduce a new variable vφ with dom(vφ ) = {0, 1}, and set V L = V ∪ {vφ | φ ∈ L}. • The initial state and goals are set to I L = I ∪ {vφ = 0 | φ ∈ L}, and GL = G ∪ {vφ = 1 | φ ∈ L}. • For each action a ∈ A, we introduce an action aL = pre(a), eﬀ(a) ∪ {vφ = 1 | eﬀ(a)[v] ∈ φ ∈ L} , that is, for each landmark φ ∈ L that a can achieve, aL will assign the corresponding auxiliary variable vφ to its goal value. Given that, we set AL = {aL | a ∈ A}. Note that, for any plan ρ for Π, there is a plan ρ for ΠL of the same cost, obtained by replacing every action a along ρ with aL . Thus, there is bijective, cost-preserving correspondence between the plans of Π and ΠL . Proposition 1 Given a planning task Π and a set of initially unachieved disjunctive landmarks L of Π, the direct landmark-based surrogate ΠL of Π is a surrogate of the latter, and can be constructed from Π and L in polynomial time. To illustrate the process of creating a direct landmarkbased surrogate, as well as the potential of using direct landmark-based surrogates with abstraction heuristics, consider a planning task Π with three binary variables V = {x, y, z}, action set A of three actions a1 = {x = 0}, {x = 1} , a2 = {x = 1, y = 0}, {y = 1} , a3 = {y = 1, z = 0}, {z = 1} initial state I = {x = 0, y = 0, z = 0}, and the goal G = {z = 1}. All the actions have the same cost 1. Figure 1(a) depicts the causal graph of this planning task. While the cost of the optimal plan for this task is 3, we have hF (I) = 2. The reason for that is shown in Figure 1(b). Structural patterns will not account for the cost of achieving x = 1, despite the fact that it has to hold on any plan for this task. Note that there are two initially unachieved landmarks in this task that go beyond G, namely x = 1 and y = 1. Thus, the direct landmark-based surrogate ΠL of Π will consist of the variables V L = {x, y, z, vx=1, vy=1 }, action set AL a1 = {x = 0}, {x = 1, vx=1 = 1} , a2 = {x = 1, y = 0}, {y = 1, vy=1 = 1} , a3 = {y = 1, z = 0}, {z = 1}
Landmarks corresponding to the explicit goals of the task can be safely ignored in the construction of ΠL , compiling in only landmarks φ ∈ L such that I |= φ and G |= φ.
1

initial state I L = {x=0, y=0, z=0, vx=1=0, vy=1 =0}, and goal GL = {z = 1, vx=1 = 1, vy=1 = 1}. The causal graph of ΠL is shown in Figure 1(c), and Figure 1(d) shows the fork-decomposition of ΠL . The left pattern will have the action representatives a1 = {x = 0}, {x = 1} , a2 = 1 1 {x = 1}, {vx=1 = 1} , and a1 = {x = 1}, {vy=1 = 2 1} . The right pattern will have the action representatives a2 = {y = 0}, {y = 1} , a3 = {y = 1}, {vy=1 = 1} , 2 2 and a1 = {y = 1, z = 0}, {z = 1} . Uniform action 3 cost partitioning will assign 1 to a1 , 1/2 to a1 and a2 , and 3 1 1 1/3 to a1 , a2 , and a3 . The optimal plan costs for the left 2 2 2 and right patterns are 4/3 and 5/3, respectively, resulting in hF (I L ) = h∗ (I L ) = 3. In general, while the resemblance between the respective components of Π and ΠL is high, fork decomposition of ΠL both enriches the patterns already present in the fork decomposition of Π (by, e.g., adding more children to forks’ roots), and induces patterns that would not be present in the fork decomposition of Π at all. In turn, the richer is the forkdecomposition in terms of the number of patterns and the comprehensiveness of each pattern, the higher the estimate we can possibly obtain from that decomposition. However, “possibly obtain” and “obtain” are not necessarily the same thing, and a lot depends on the speciﬁc action cost partitioning between the patterns of the additive ensemble comprising hF (Katz and Domshlak 2008a). The choice of action cost partitioning can vary from optimal (in terms of maximizing the estimate) to almost arbitrarily bad. The good news is that, under optimal action cost partitioning (achievable in polynomial time; see Katz and Domshlak 2008a), the dominance relation hF (I L ) ≥ hF (I) always holds. In fact, a stronger claim holds. Proposition 2 Given a planning task Π = V, A, I, G, cost , and a direct landmark-based surrogate ΠL of Π, for any state s of Π and any state s of ΠL such that s [V ] = s, under the optimal action cost partitioning we have hF (s ) ≥ hF (s). While the statement of Proposition 2 is very positive, in practice the picture is more complicated. The procedure of Katz and Domshlak (2008a) for devising an optimal action cost partition is polynomial-time, yet it is based on solving large linear programs, and thus takes too much time to be computed in practice at every search node. As the ﬁrst sanity check for the practical usefulness of switching from Π to ΠL , we compared the initial-state estimates of a suboptimal (yet cheep to compute) fork-decomposition heuristic for planning tasks from a wide sample of IPC domains, as well as for their respective direct landmark surrogates. The landmarks were discovered using LAMA’s landmark discovery procedure (Richter, Helmert, and Westphal 2008). The construction of the surrogate task ΠL from the original task Π was done as a part of the preprocessing. Table 2 summarizes the implication of switching to the surrogate problems in terms of the quality of the initial state estimation with the above setting of hF . These results appear to be very promising. Except for the Blocksworld domain where estimates on ΠL on average got slightly worse,

53

x y y z z

x

vx=1

x y
vy=1 vx=1 vy=1

y

z

vy=1

z

(a)

(b)

(c)

(d)

Figure 1: Causal graphs (a,c) and fork decomposition (b,d) for the example task Π and its direct landmark-based surrogate ΠL , respectively. Nodes with double-line contour correspond to the goal-mentioned variables V (G) and V (GL ).
domain airport-ipc4 (20) blocks-ipc2 (30) depots-ipc3 (7) driverlog-ipc3 (14) freecell-ipc3 (7) grid-ipc1 (2) gripper-ipc1 (11) logistics-ipc1 (6) logistics-ipc2 (22) miconic-strips-ipc2 (140) mprime-ipc1 (25) mystery-ipc1 (22) openstacks-ipc5 (7) pathways-ipc5 (5) pipesworld-notankage-ipc4 (22) pipesworld-tankage-ipc4 (14) psr-small-ipc4 (50) rovers-ipc5 (7) satellite-ipc4 (9) tpp-ipc5 (6) trucks-ipc5 (9) zenotravel-ipc3 (12)
hF (I) c∗ hF (I L ) c∗

0.627 0.477 0.419 0.632 0.295 0.258 0.375 0.854 0.998 0.434 0.489 0.621 0.611 0.187 0.302 0.218 0.169 0.529 0.541 0.838 0.385 0.694

0.969 0.432 0.508 0.708 0.636 0.571 0.546 0.931 0.994 0.964 0.625 0.713 0.829 0.187 0.359 0.293 0.178 0.653 0.844 0.836 0.608 0.809

Table 2: Average ratios between the initial state estimates of hF on the original and landmarks-enhanced problems, and the optimal solution length c∗ = h∗ (I) = h∗ (I L ). The number of tasks taken into consideration per domain appears in parentheses in the ﬁrst column. in all other domains the estimates improved (or remained unchanged), with the most substantial average improvement of ≈ 120% in Freecell, Grid, and Miconic. Given that LAMA’s landmark discovery procedure typically takes very low time, these results suggest that the basic idea of incorporating landmark information into the process of problem abstraction is valuable. Next, however, we show that there is still some work to be done to make the basic idea trully effective.

Exploiting ΠL
The left half of Table 3 (A∗ /h on ΠL vs. Π) describes the effeciveness of the straightforward approach of solving the surrogate task ΠL comparatively to solving the original task Π. The ﬁrst observation is that for both abstractions, the total number of solved planning tasks decreases when we switch from Π to ΠL . There are only four domains in which this number increased, namely B LOCKSWORLD with MS-104 heuristic and M ICONIC, S ATELLITE, and T RUCKS with hF heuristic. On the rest of the domains, with both heuristics the number of solved tasks either decreases or remains unchanged. A deeper look

into the expanded nodes information revealed that in the case of merge-and-shrink abstraction, the number of expanded nodes decreased substantially on three domains only, namely B LOCKSWORLD, F REECELL, and M PRIME, remaining almost unchanged or increasing substantially on the rest of the domains. In the case of structural-patterns the picture is different. Most of the domains are divided almost evenly to sets of substantially increased and substantially decreased numbers of expanded nodes, with only small number of domains having the number of expanded nodes almost unchanged. On B LOCKSWORLD, D EPOTS, D RIVERLOG, G RIPPER, L OGISTICS -00, P IPESWORLD N OTANKAGE, and P IPESWORLD -TANKAGE the number of expanded nodes substantially increased, causing less tasks to be solved on almost all of these domains. On the other hand, on M ICONIC, S ATELLITE, T RUCKS, A IR PORT , F REECELL , G RID , L OGISTICS -98, M PRIME , O PEN STACKS , and ROVERS the number of expanded nodes substantially decreased, on each of the ﬁrst three causing one more task to be solved. Interestingly, on A IRPORT, despite the decrease in expanded nodes on average, less tasks are solved overall. The explanation for this ”inconsistency” between Tables 2 and 3 is actually very simple. In general, the state space of the surrogate task ΠL is 2|L| times larger the state space of the original Π. Thus the number of reachable states in ΠL can be up to 2|L| times larger than in Π because every state of Π is now considered in different contexts of achievement of different subsets of landmarks. Hence, even if the heuristics functions on ΠL are getting more accurate, the effort required from A∗ to ”prove” the optimality of the optimal solution increases.

Exploiting ΠL Indirectly
To eliminate this pitfall to a large extent we have evaluated a scheme in which the heuristic estimates come from the landmark enhanced tasks while the (forward state-space) search is performed on the original task using the recent LM-A∗ search algorithm of Karpas and Domshlak (2009). In general, this scheme works as follows. 1. Starting with the initial state I, each evaluated state s of Π is ﬁrst associated with a subset of landmarks Ls ⊆ L that must be achieved on the way to the goal from s. Determining the landmark set Ls is done using the techniques developed by Richter et al. (2008) and Karpas and Domsh-

54

domain (D) ΠL airport-ipc4 15 blocks-ipc2 20 depots-ipc3 6 driverlog-ipc3 11 freecell-ipc3 4 grid-ipc1 2 gripper-ipc1 4 logistics-ipc1 3 logistics-ipc2 16 miconic-strips-ipc2 44 mprime-ipc1 17 mystery-ipc1 16 openstacks-ipc5 7 pathways-ipc5 4 pipes-notank-ipc4 16 pipes-tank-ipc4 12 psr-small-ipc4 50 rovers-ipc5 6 satellite-ipc4 5 schedule-strips 19 tpp-ipc5 6 trucks-ipc5 4 zenotravel-ipc3 9 Π 17 18 7 12 4 2 7 4 16 55 21 17 7 4 21 13 50 6 6 19 6 5 11

A∗ /h on ΠL vs. MS-104 SBE(ΠL ) E(Π) ΠL 15 14.71 15.00 18 18 16.83 13.35 18 6 4.43 5.84 4 11 9.94 9.77 11 4 3.99 2.67 5 2 1.40 1.34 2 4 1.12 4.00 5 3 0.61 3.00 6 16 10.76 16.00 20 44 35.61 43.75 52 17 14.03 10.93 22 15 14.29 14.01 21 7 7.00 6.96 7 4 3.08 4.00 4 16 13.21 14.51 15 12 8.38 11.54 10 50 49.97 49.66 49 6 5.80 5.94 6 5 4.93 4.97 7 17 17.00 17.00 46 6 6.00 5.48 6 4 2.79 3.57 7 9 9.00 8.23 9

Π Π 20 21 7 12 5 2 7 6 22 51 23 21 7 4 16 10 49 6 6 46 6 6 11

hF

SBE(ΠL ) 18 17.95 18 3.59 4 1.41 11 8.25 5 5.00 2 2.00 5 0.75 6 4.31 20 11.91 48 45.16 22 17.39 21 16.65 7 7.00 4 4.00 15 11.57 10 7.21 49 48.41 6 6.00 6 6.00 46 42.38 6 5.48 6 6.00 9 7.66

E(Π) 13.86 17.60 4.00 9.77 1.38 1.03 5.00 2.94 20.00 21.40 9.58 16.86 1.26 3.99 14.16 8.99 48.88 3.14 2.13 43.61 6.00 1.79 8.04

ΠL 16 18 4 11 4 1 6 3 14 63 20 19 7 4 15 13 49 5 7 19 6 4 9

LM-A∗ on Π; h on ΠL vs. MS-104 Π SBE(ΠL ) E(Π) ΠL 17 16 16.00 13.90 17 18 18 17.26 11.46 17 7 4 4.00 3.28 4 12 11 11.00 8.66 11 4 4 3.87 3.59 5 2 1 1.00 0.12 2 7 6 5.01 5.91 6 4 3 2.12 1.67 5 16 14 10.84 13.03 20 55 48 43.04 38.87 108 21 20 18.22 13.64 23 17 17 16.91 15.96 21 7 7 2.00 7.00 7 4 4 4.00 4.00 4 21 15 13.50 13.57 15 13 12 10.14 11.20 10 50 49 43.68 48.43 48 6 5 5.00 4.24 5 6 6 6.00 3.25 7 19 19 19.00 19.00 46 6 6 6.00 5.37 5 5 4 2.29 3.89 7 11 9 9.00 7.36 9

A∗ /h on Π Π 20 21 7 12 5 2 7 6 22 51 23 21 7 4 16 10 49 6 6 46 6 6 11

hF

SBE(ΠL ) 17 17.00 17 5.98 4 2.97 11 10.84 5 5.00 2 2.00 6 6.00 5 4.38 20 11.42 51 51.00 23 21.07 21 19.44 7 7.00 4 4.00 15 15.00 10 10.00 48 48.00 5 5.00 6 6.00 46 46.00 5 4.49 6 6.00 9 9.00

E(Π) 10.86 17.00 3.59 6.64 1.45 0.20 5.22 1.40 20.00 8.17 11.43 16.44 1.27 4.00 9.61 6.75 47.58 2.01 1.01 46.00 5.00 0.84 5.31

296 328 291 254.89271.48

350 364 344 286.07265.44

317 328 298 269.91257.41

402 364 343 317.59231.77

Table 3: A summary of the experimental results for A∗ search comparing landmarks enriched tasks to the original tasks, and for searching the original tasks, comparing LM-A∗ with estimation on the landmark enriched tasks to the plain A∗ . The columns are as described previously in Table 1. lak (2009). 2. Given Ls , the state s is mapped into the state s of ΠL where s [V ] = s, and, for each φ ∈ L, if φ ∈ Ls , then s [vφ ] = 0, otherwise, s [vφ ] = 1. 3. The heuristic estimate for s is set to hF (s ). The latter is no longer a state-dependent, but path (or, in fact, multi-path) dependent estimate, and thus the machinery of LM-A∗ is required. Importantly, however, this estimate is still admissible, and thus LM-A∗ guarantees to ﬁnd optimal solutions. The right half of Table 3 (LM-A∗ on Π; h on ΠL vs. A∗ /h on Π) describes the effeciveness of such a scheme comparatively to the basic approach of solving the original task Π with A∗ . In general, the reduction in the number of state expansions comparatively to running A∗ directly on the surrogates ΠL has been consistently substantial. Note that, despite this improvement of pruning, some tasks solved with A∗ /hF on ΠL have not been solved using LM-A∗ (e.g., task 8 in D RIVERLOG), and this because of a generally higher search-node processing time of LM-A∗ . However, the opposite has been observed as well (e.g., task 13 of D RIVERLOG, and task 6 of G RIPPER), with the major difference being observed in the M ICONIC domain: while A∗ with hF solved 51 and 52 tasks from this domain on their original and surrogate representations, respectively, using the LM-A∗ scheme allowed for solving 108 tasks in M ICONIC. achieved, the portions of the action costs “assigned to the achievement of φ” are getting lost, resulting in erosion of the heuristic values. This is where better action cost partition can potentially improve the situation. Table 4 compares the number of tasks solved with LM-A∗ under our time and memory limits using the basic uniform action cost partition with this using (on the left) per-state optimal action cost partition and (on the right) ﬁxed action cost partitions being optimal for the initial states of the tasks. Note that, in the case of per-state optimal action cost partition, the evaluation is based on solving very large linear programs, and thus the evaluation time increases substantially. As a direct result, despite a dramatic reduction in node expansions, the total number of tasks solved within the time limit decreases.2 Having said that, still some nine tasks of the M ICONIC domain that were not solved with any other fork-decomposition approach are solved under the per-state optimal action cost partition. In the case of (ﬁxed) optimal for the initial state action cost partition the results are much more promising. On most domains, the number of expanded nodes decreases, resulting in increase in the number of tasks solved on ROVERS, S CHEDULE - STRIPS, T RUCKS, and Z ENOTRAVEL. Overall, the number of solved tasks either increased or remained the same on all the domains considered in the evaluation. In other words, even a ﬁxed but not entirely ad hoc action cost partition can provide a nice balance between the effort invested in heuristic computation and the beneﬁt it buys us in the time limited settings.

Cost Partition Revisited
Note that, as it is exempliﬁed by the still not good results in the B LOCKSWORLD domain, the original growth of the search space was not the only source of troubles. Another critical pitfall is the interplay between our ﬁxed, ad hoc action cost partitioning among the patterns and the typical nature of landmarks. A landmark φ should take place only at some time point along the plan. Very roughly, once φ is

On some problems solved under optimal action cost partitioning, there were still a few search nodes for which our LP solver failed solving the respective optimization problems. To avoid terminating the search, the heuristic value for these nodes was set to 1.

2

55

domain (D) airport-ipc4 blocks-ipc2 depots-ipc3 driverlog-ipc3 freecell-ipc3 grid-ipc1 gripper-ipc1 logistics-ipc2 logistics-ipc1 miconic-strips-ipc2 mprime-ipc1 mystery-ipc1 openstacks-ipc5 pathways-ipc5 pipesworld-notankage-ipc4 pipesworld-tankage-ipc4 psr-small-ipc4 rovers-ipc5 satellite-ipc4 schedule-strips tpp-ipc5 trucks-ipc5 zenotravel-ipc3

O 7 13 1 6 2 0 2 17 2 90 9 11 5 4 3 2 40 4 5 33 5 4 7 272

optimal vs. uniform U SB E(O) 17 7 6.77 17 13 13.00 4 1 1.00 11 6 5.38 5 2 2.00 2 0 0.00 6 2 1.96 20 17 17.00 5 2 2.00 108 81 80.91 23 9 9.00 21 11 10.50 7 5 5.00 4 4 4.00 15 3 3.00 10 2 2.00 48 40 40.00 5 4 4.00 7 5 5.00 46 33 32.96 5 5 5.00 7 4 4.00 9 7 7.00 402 263 261.47

E(U) 6.52 4.37 0.22 1.33 0.07 0.00 1.71 11.20 0.42 51.26 2.79 8.34 1.95 2.36 1.14 0.91 26.98 2.60 2.30 16.33 4.02 0.76 2.48 150.06

OI 17 17 4 11 5 2 6 20 5 108 23 21 7 4 15 10 48 7 7 47 5 8 11 408

optimal for I vs. uniform U SB E(OI) 17 17 17.00 17 17 13.98 4 4 4.00 11 11 11.00 5 5 5.00 2 2 2.00 6 6 6.00 20 20 19.01 5 5 4.83 108 108 88.63 23 23 21.98 21 21 21.00 7 7 7.00 4 4 4.00 15 15 15.00 10 10 10.00 48 48 35.86 5 5 4.28 7 7 5.61 46 43 31.24 5 5 5.00 7 7 6.69 9 9 8.84 402 399 347.94

E(U) 17.00 13.47 3.46 7.56 3.22 2.00 5.55 18.62 4.03 99.37 18.08 19.34 2.50 2.37 10.39 6.76 47.94 3.32 5.02 29.49 4.02 5.01 5.24 333.76

Table 4: A summary of the experimental results for hF heuristic with optimal action cost partition per evaluated state (O) vs. ﬁxed uniform cost partition (U) and ﬁxed optimal for initial state partition (OI) vs. ﬁxed uniform cost partition (U). The notation is similar to this in Table 1.

Summary
Motivated by an observation that the quality of abstraction heuristics heavily depends on the richness of the explicit goal speciﬁcation in the planning tasks, we have investigated exploiting implicit goals in the form of discoverable landmarks for enhancing abstraction heuristics. We proposed a concrete scheme for such an enhancement that is based on (i) compiling the landmarks into the planning task speciﬁcation, and (ii) using the compiled task within heuristic-search planning side by side with the original task. While this scheme is applicable to arbitrary heuristics, our empirical evaluation showed that it is especially attractive for structural-pattern heuristics, and less so for explicit abstractions. The major reason for that appears to be the fact that our approach to landmark compilation into the task increases the dimensionality of the latter up to a linear factor. While structural-pattern abstractions are not sensitive to that matter, this is substantially less so for explicit abstractions. Hence, probably the most valuable direction for future research is looking for alternative ways of incorporating landmark information into abstractions that would ﬁt well the speciﬁcs of the explicit abstractions such as PDBs and merge-and-shrink.

References
B¨ ckstr¨ m, C., and Nebel, B. 1995. Complexity results for a o SAS+ planning. Comp. Intell. 11(4):625–655. Edelkamp, S. 2001. Planning with pattern databases. In ECP, 13–24. Haslum, P., and Geffner, H. 2000. Admissible heuristics for optimal planning. In ICAPS, 140–149. Haslum, P.; Botea, A.; Helmert, M.; Bonet, B.; and Koenig, S. 2007. Domain-independent construction of pattern database heuristics for cost-optimal planning. In AAAI, 1007–1012.

Helmert, M., and Domshlak, C. 2009. Landmarks, critical paths and abstractions: What’s the difference anyway? In ICAPS, 162–169. Helmert, M.; Haslum, P.; and Hoffmann, J. 2007. Flexible abstraction heuristics for optimal sequential planning. In ICAPS, 200–207. Helmert, M. 2006. The Fast Downward planning system. JAIR 26:191–246. Hoffmann, J.; Porteous, J.; and Sebastia, L. 2004. Ordered landmarks in planning. JAIR 22:215–278. Karpas, E., and Domshlak, C. 2009. Cost-optimal planning with landmarks. In IJCAI. Katz, M., and Domshlak, C. 2008a. Optimal additive composition of abstraction-based admissible heuristics. In ICAPS, 174–181. Katz, M., and Domshlak, C. 2008b. Structural patterns heuristics via fork decomposition. In ICAPS, 182–189. Katz, M., and Domshlak, C. 2009. Structural-pattern databases. In ICAPS, 186–193. Porteous, J.; Sebastia, L.; and Hoffmann, J. 2001. On the extraction, ordering, and usage of landmarks in planning. In ECP. Richter, S.; Helmert, M.; and Westphal, M. 2008. Landmarks revisited. In AAAI, 975–982.

56

