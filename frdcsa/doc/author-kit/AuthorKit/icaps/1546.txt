Proceedings of the Twentieth International Conference on Automated Planning and Scheduling (ICAPS 2010)

Constraint Propagation in Propositional Planning
Andreas Sideris and Yannis Dimopoulos
Department of Computer Science University of Cyprus 1678 Nicosia, Cyprus sideris@cytanet.com.cy, yannis@cs.ucy.ac.cy

Abstract
Planning as Satisﬁability is a most successful approach to optimal propositional planning. It draws its strength from the efﬁciency of state-of-the-art propositional satisﬁability solvers, combined with the utilization of constraints that are inferred from the problem planning graph. One of the recent improvements of the framework is the addition of long-distance mutual exclusion (londex) constraints that relate facts and actions which refer to different time steps. In this paper we compare different encodings of planning as satisﬁability wrt the constraint propagation they achieve in a modern SAT solver. This analysis explains some of the differences observed in the performance of different encodings, and leads to some interesting conclusions. For instance, the BLACKBOX encoding achieves more propagation than the one of SATPLAN06, and therefore is a stronger formulation of planning as satisﬁability. Moreover, our investigation suggests a new more compact and stronger model for the problem. We prove that in this new formulation many of the londex constraints are redundant in the sense that they do not add anything to the constraint propagation achieved by the model. Experimental results suggest that the theoretical results obtained are practically relevant.

Introduction
One of the most successful approaches to optimal STRIPS planning is the SATPLAN approach, that translates a planning problem to a propositional satisﬁability one (SAT). The approach draws its strength from the efﬁciency of state-of-the-art propositional satisﬁability solvers, combined with the utilization of constraints that are inferred from the problem planning graph. After more than a decade of research, there exist nowadays many different encodings of propositional planning as satisﬁability, including those of BLACKBOX (Kautz and Selman 1999) and SATPLAN06 (Kautz, Selman, and Hoffmann 2006). In most of the studies these formulations are compared experimentally, and little is known about their theoretical underpinnings and the reasons that render one model better than the other. In this work we present a ﬁrst theoretical analysis that compares some of these encodings and explains important reasons that contribute to the differences which are observed in their performance.
Copyright c 2010, Association for the Advancement of Artiﬁcial Intelligence (www.aaai.org). All rights reserved.

Our investigation is based on the simple observation that the planning as satisﬁability framework regards the planning problem as a Constraint Satisfaction one. Therefore, constraint propagation, i.e. the process of deriving the values of new variables from values that are known or assumed for other variables, is a central notion. Stronger forms of propagation derive more variable values and therefore lead to more pruning of the search space than weaker ones. If the computational cost of the constraint propagation procedure is low, the reduction of the search space usually translates into better run times. This work compares different planning encodings wrt the unit propagation they achieve, the standard constraint propagation method employed in almost all modern SAT solvers. Roughly speaking, a planning model is stronger than another if it is able to propagate more variable values. Moreover, one encoding is more compact than some other if it achieves the same propagation but with a subset of the clauses. The clauses that are contained in the less compact encoding are redundant wrt unit propagation. Our analysis reveals some interesting relationships. The most unexpected is probably that the BLACKBOX encoding is stronger than the one used in SATPLAN06. Based on our theoretical results we propose a new encoding of planning as satisﬁability, called SAT-MAX-PLAN (abbreviated as SMP), that achieves more propagation than all other models, and it does so with a set of clauses that contains no redundancy. We also study the propagation power of long distance mutual exclusion constraints (londex), as introduced in the MAXPLAN system (Chen, Xing, and Zhang 2007), and show that they indeed strengthen the model of the SATPLAN06 encoding. More precisely, we prove that SATPLAN06 can propagate londex type information forward through the layers of the propositional theory, i.e. from variables that refer to a time point to variables that refer to some later time point. However, SATPLAN06 fails to do the same backwards, and therefore adding londex type constraints to SATPLAN06 encodings improves propagation. However, we show that londex constraints do not increase the propagation of the SMP encoding, and are therefore redundant in this new model. In the experimental part we compare SMP, BLACKBOX and SATPLAN06 in a number of domains from the last planning competitions. It turns out that SMP

153

outperforms both other encodings, whereas between the two, BLACKBOX has an advantage over SATPLAN06. In fact, SMP coupled with a new SAT solver called precosat (Biere 2009), can solve more problems than the other planners, and presents a notable advancement of the state-of-the-art of planning as satisﬁability. Moreover, it shows that the theoretical results of this work are of practical relevance. To the best of our knowledge the only other studies close to the spirit of this work are (Geffner 2004) and (Rintanen 2008). However, the focus there is on understanding mutexes and londexes, and explaining how they can be derived by a modern SAT solver. Our investigation is complementary to the above, and explains what, when and why constraints improve performance.

where A is an action, corresponds to the decision of whether action A is taken or not at time T , and analogously for variables of the form f (T ) where f is a fact. In all systems that utilize the planning graph an action/fact variable is introduced to the theory only if the corresponding action/fact node is present in the planning graph. More speciﬁcally, the variables are created as follows. 1. Unit clauses for the initial and ﬁnal state. 2. An action variable A(T ) is added to the theory if for each p ∈ pre(A), p(T ) occurs in the theory, and there is no pair p1 , p2 ∈ pre(A) s.t. ¬p1 (T ) ∨ ¬p2 (T ) belongs to the theory. 3. A proposition variable p(T ) is added to the theory if some action variable A(T − 1) is in the theory, with p ∈ add(A). To facilitate our study we ﬁrst introduce a new encoding called Graphplan-direct, that is direct translation of the planning graph structure into propositional logic. The other encodings that we investigate in the rest of this paper are subsets of the clause set of the Graphplan-direct formulation. The clauses of the Graphplan-direct encoding are the following. 1. Unit clauses for the initial and ﬁnal state. 2. A(T ) → f (T ), for every action A and fact f s.t. f ∈ pre(A). 3. A(T ) → f (T + 1), for every action A and fact f s.t. f ∈ add(A). 4. A(T ) → ¬f (T + 1), for every action A and fact f s.t. f ∈ del(A). 5. f (T ) → A1 (T − 1) ∨ . . . ∨ Am (T − 1), for every fact f and all actions Ai , 1 ≤ i ≤ m (including the noops) s.t. f ∈ add(Ai ). 6. ¬f (T ) → A1 (T − 1) ∨ . . . ∨ Am (T − 1) ∨ ¬f (T − 1), for every fact f and all actions Ai , 1 ≤ i ≤ m s.t. f ∈ del(Ai ). 7.1 ¬A1 (T ) ∨ ¬A2 (T ), for every pair of actions A1 , A2 such that the set del(A1 ) ∩ pre(A2 ) is non-empty. 7.2 ¬A1 (T ) ∨ ¬A2 (T ), for every pair of actions A1 , A2 such that the set del(A1 ) ∩ add(A2 ) is non-empty. 7.3 ¬A1 (T ) ∨ ¬A2 (T ), if there is a pair of facts f1 ∈ pre(A1 ), f2 ∈ pre(A2 ) such that f1 , f2 are mutually exclusive at time T . 8 ¬f1 (T ) ∨ ¬f2 (T ), for every pair of facts f1 , f2 that are mutex at time T . The ﬁrst system that employed information derived from the planning graph in the propositional encoding of a planning problem was BLACKBOX (Kautz and Selman 1999). BLACKBOX (version 43) supports different encodings, three of which we investigate here and denote by BB-7, BB-31, and BB-32. Each of them is obtained by selecting the appropriate value (7, 31, or 32) of parameter axioms. The set of clauses of each of these encodings (which is a subset of the clauses of the Graphplan-direct model) is the following.

Preliminaries
In this section we discuss brieﬂy various SAT encodings for STRIPS planning problems, constraint propagation in SAT, and long distance mutual exclusion constraints. We assume that the reader is familiar with the basics of STRIPS planning, planning graphs, londex constraints, and SAT solving. Our analysis refers exclusively to STRIPS planning.

Planning as Satisﬁability
A (STRIPS) planning problem is a triple P =< I, G, A >, where I is the set of facts that hold in the initial state, G are the goals, and A is a set of actions. Each action A has preconditions, denoted by pre(A), add effects, denoted by add(A), and delete effects, denoted by del(A). From the description of a planning problem a planning graph can be constructed as described in (Blum and Furst 1997). A central notion in planning graphs is action interference, deﬁned as follows. Deﬁnition 1 Two action A1 and A2 interfere whenever any of the sets del(A1 ) ∩ add(A2 ) and del(A1 ) ∩ pre(A2 ) is non-empty. In this work we study some of the most successful models of planning as satisﬁability. They include different encodings supported by the planning systems BLACKBOX, and SATPLAN06. All these systems use information that is derived from the planning graph of the problem. Part of the information that is extracted has the form of mutually exclusive pairs, or mutexes for short, that are deﬁned as follows. 1. Two actions A1 , A2 are mutually exclusive at level l if they interfere or there is a pair of facts f1 ∈ pre(A1 ), f2 ∈ pre(A2 ) such that f1 , f2 are mutually exclusive at level l. 2. Two facts f1 , f2 are mutually exclusive at level l if for every pair of actions A1 , A2 such that f1 ∈ add(A1 ), f2 ∈ add(A2 ), A1 , A2 are mutually exclusive at level l − 1. In a planning graph each level corresponds to a different time point, while inertia is captured by noop actions that encode persistence. In the SAT model of a planning problem time-stamped propositional atoms (or variables) represent the action and facts of the problem. An atom A(T ),

154

1. BB-7: Clauses 1, 2, 5, 7.1, 7.2, 7.3 2. BB-31: Clauses 1, 2, 3, 4, 5, 7.1, 8 3. BB-32: Clauses 1, 2, 3, 4, 5, 7.1, 7.2, 7.3, 8 Similarly to BLACKBOX, SATPLAN06 also supports different encodings. Two of them are mixed action/fact models, and the other two are action-based encodings. Due to space limitations, in this work we restrict ourselves to the mixed models. They are denoted by SATPLAN06-4 and SATPLAN06-3, and are obtained by setting the encoding parameter to value 4 and 3 respectively. Each of them contains the following clauses (again numbers refer to the Graphplan-direct model). 1. SATPLAN06-4: Clauses 1, 2, 5, 7.1, 7.2, 8 2. SATPLAN06-3: Clauses 1, 2, 5, 7.1, 7.2, 7.3, 8 The propositional theory that results from the above encodings, for a ﬁxed number of time steps Tmax , is given as input to a SAT solver. Any time step T ≤ Tmax , is a valid time point.

For every multi-valued variable in a planning problem, the method of (Chen, Xing, and Zhang 2007) builds the domain transition graph, from which the fact distances are calculated. Deﬁnition 4 Given an MDF variable x with domain Dx , its domain transition graph (DTG) Gx is a digraph with vertex set Dx and arc set Ax , such that (v, v ) ∈ Ax iff there is an action o such that del(o) = v and add(o) = v . Deﬁnition 5 Given a DTG Gx , the distance from a fact f1 = M DF (x, v1 ) to another fact f2 = M DF (x, v2 ), denoted by ΔGx (f1 , f2 ), is deﬁned as the minimum distance from vertex v1 to vertex v2 in Gx . Based on fact distances, londex constraints for facts and actions are derived. In the following, t(f ) denotes the time step at which fact f is true, and t(a) the time step at which an action is chosen. Moreover, we say that an action a is associated with a fact f if f appears in pre(a), add(a) or del(a). Deﬁnition 6 (Fact Londex) Given two boolean facts f1 and f2 , that correspond to two nodes in a DTG Gx , such that ΔGx (f1 , f2 ) = r, then there is no valid plan in which 0 ≤ t(f2 ) − t(f1 ) < r. There are two classes of actions londex constraints that are deﬁned below. Deﬁnition 7 (Class A Action Londex) If actions a and b are associated with a fact f , they are mutually exclusive if one of the following holds: 1. f ∈ add(a), f ∈ del(b), and t(a) = t(b) 2. f ∈ del(a), f ∈ pre(b), and 0 ≤ t(b) − t(a) ≤ 1 Deﬁnition 8 (Class B Action Londex) If action a is associated with fact f1 and action b with fact f2 , and it is invalid to have 0 ≤ t(f2 ) − t(f1 ) < r according to fact londex constraints, then a and b are mutually exclusive if one of the following holds: 1. f ∈ add(a), f ∈ add(b), and 0 ≤ t(b) − t(a) ≤ r − 1 2. f ∈ add(a), f ∈ pre(b), and 0 ≤ t(b) − t(a) ≤ r 3. f ∈ pre(a), f ∈ add(b), and 0 ≤ t(b) − t(a) ≤ r − 2 4. f ∈ pre(a), f ∈ pre(b), and 0 ≤ t(b) − t(a) ≤ r − 1

Propagation in a SAT solver
State-of-the-art SAT solvers such as siege (Ryan 2003), minisat (Een and Sorensson 2003) and precosat (Biere 2009), employ Unit Resolution for constraint propagation. That is, they resolve all unit clauses with all other clauses in the theory, and iterate this process until no further unit clause can be derived (or unsatisﬁability is proven). In the following, U P (T ) denotes the closure of theory T under Unit Propagation. The notion of UP-redundancy plays a central role in our analysis, and is deﬁned as follows. Deﬁnition 2 The binary clause l1 ∨ l2 is UP-redundant wrt a theory T iff either l1 ∨ l2 ∈ T or lj ∈ U P (T ∪ {¬li }), for i = j and i, j ∈ {1, 2}. Below, several notions regarding the relative strength of propositional theories wrt binary clauses are deﬁned. Deﬁnition 3 Theory T1 is at least as strong as theory T2 wrt UP and binary clauses, denoted by T1 ≥UP T2 , iff every clause of T2 \T1 is binary and UP-redundant wrt T1 . Theory T1 is strictly stronger than theory T2 wrt UP and binary clauses, denoted by T1 >SUP T2 , iff T1 ≥UP T2 or T1 ⊃ T2 and T2 ≥UP T1 . Theory T1 is more compact than theory T2 wrt UP and binary clauses, denoted by T1 >C T2 , iff T1 ≥UP T2 and T1 ⊂ T2 .

The relative strength of the encodings
We ﬁrst study unit propagation in planning systems that employ information derived from the planning graph. More precisely, we will investigate the relative constraint propagation power of BLACKBOX and the mixed SATPLAN06 encodings. It is easy to see that the encodings are related as follows: for any (STRIPS) planning problem P , SATPLAN064(P ) ⊂ SATPLAN06-3(P ) ⊂ BB-32(P ), and BB-7(P ) ⊂ SATPLAN06-3(P ). The following proposition shows that some of the mutex clauses are UP-redundant in some encodings. Proposition 1 The set of clauses 7.3 is UP-redundant wrt any propositional encoding that contains the set of clauses 2 and 8.

Long-Distance Mutual Exclusion
The Long-Distance Mutual Exclusion (londex) method of (Chen, Xing, and Zhang 2007), is based on the multi-valued domain formulation (MDF), in which a planning domain is deﬁned over a set X = (x1 , . . . , xn ) of multi-valued variables, where each xi has an associated ﬁnite domain Di . If x is a multi-valued variable from X and v a value from its domain, x = v denotes the assignment of v to x. To associate such an assignment x = v with a boolean fact f , we use the notation f = M DF (x, v).

155

Proof Let ¬A1 (T ) ∨ ¬A2 (T ) be a clause with A1 and A2 two actions such that there is a pair of facts f1 ∈ pre(A1 ), f2 ∈ pre(A2 ) such that f1 , f2 are mutually exclusive at level T . We will show that ¬A2 (T ) ∈ U P (TP ∪ {A1 (T )}). From A1 (T ) and clause A1 (T ) → f1 (T ) we obtain f1 (T ). Since the theory contains axioms 8, it must contain the clause ¬f1 (T ) ∨ ¬f2 (T ). From this clause and f1 (T ) we obtain ¬f2 (T ), form which, together with A2 (T ) → f2 (T ) we conclude ¬A2 (T ). The proof of ¬A1 (T ) ∈ U P (TP ∪{A2 (T )}) is symmetric. A direct consequence of the above proposition is the following relation between the two mixed SATPLAN06 encodings. Corollary 1 For any planning problem P , SATPLAN064(P ) >C SATPLAN06-3(P ). Another result that is stated formally below can be used to simplify theories that contain clause sets 3 and 4. Proposition 2 The set of clauses 7.2 is UP-redundant wrt any propositional encoding that contains the set of clauses 3 and 4. Proof Let ¬A1 (T ) ∨ ¬A2 (T ) be a clause with A1 and A2 two actions such that at least one of the sets del(A1 ) ∩ add(A2 ) and del(A2 ) ∩ add(A1 ) is non-empty. Assume that del(A1 ) ∩ add(A2 ) = ∅ (the other case is symmetric) and let f ∈ del(A1 ) ∩ add(A2 ). We will show that ¬A2 (T ) ∈ U P (TP ∪ {A1 (T )}). The theory contains a clause of the form A1 (T ) → ¬f (T + 1) from which ¬f (T + 1) is derived. From this and clause A2 (T ) → f (T + 1), ¬A2 (T ) is concluded. A direct consequence of the above proposition is that encoding BB-32 can be simpliﬁed by removing clauses 7.2. Similarly, by proposition 1, clauses 7.3 can also be omitted. Therefore, BB-31(P ) >C BB-32(P ), for all problems P . A similar observation holds for the Graphplan-direct encoding. By removing the UP-redundant clauses 7.2 and 7.3 we obtain SATPLANmax encoding which contains the following clauses: • SATPLANmax : Clauses 1, 2, 3, 4, 5, 6, 7.1, 8. On the other hand, the set of clauses 8 is not UPredundant wrt to any encoding that contains any of the other clauses (i.e. 1 to 7.3). From this we conclude that, for all problems P , BB-31(P ) >SUP BB-7(P ). Similarly clause sets 3 and 4 are not UP-redundant wrt to any other clause, and therefore, BB-31(P ) >SUP SATPLAN06-4(P ). Hence, it seems that from the implemented encodings of planning as satisﬁability, BB-31 is the strongest. Finally, SATPLANmax (P ) >SUP BB-31(P ), for any problem P , due to the existence of clause set 6. Note, that the SATPLANmax encoding uses only one set of mutex actions, namely set 7.1. However, it is possible that a clause is included in several sets of mutex clauses, each for a different reason. Therefore, a mutex pair of actions that belongs to set 7.1 may also belong to other mutex sets that are UP-redundant. The size of clause set 7.1 of SATPLANmax , can be reduced by omitting all clauses of this set that also belong to sets 7.2 or 7.3. Furthermore, all mutex action clauses

on actions A1 and A2 and time T that contain add effects p1 and p2 respectively such that p1 and p2 are mutex at time T + 1 can also be omitted. We call the resulting encoding SAT-MAX-PLAN, or SMP for short.

Londex Propagation in Propositional Planning
From the STRIPS encoding P of a planning problem, we can construct its multi-valued representation PM , using a translation M as those described e.g. in (Helmert 2009). For each multi-valued variable X of PM with domain DX , we denote by X(v) the fact in its STRIPS representation P that corresponds to the assignment of value v ∈ DX to variable X. Moreover, X(v, T ) denotes the atom (in the planning graph and the propositional theory) that represents the truth value of X(v) at time T . In order to abstract away from the details of the particular method that is used to construct the multi-valued representation of a STRIPS domain, and therefore simplify our discussion, we make some, we believe, natural assumptions about the domains we consider. Deﬁnition 9 A multi-valued translation method M that translates STRIPS problems into their multi-value representation, satisﬁes the domain compatibility assumption if for every STRIPS problem P and its multi-valued representation PM the following conditions hold: 1. Let X be a multi-valued variable of PM with domain DX and A any action of P . If X(vi ) ∈ add(A) for vi ∈ DX , then X(vj ) ∈ del(A) ∩ pre(A) for some vj ∈ DX with i = j. 2. If X is a multi-valued variable of PM with domain DX , then the initial state assigns true to exactly one fact of the form X(vi ) for vi ∈ DX . We can now prove that for translations that satisfy the domain compatibility assumption, Graphplan marks as mutex all facts that refer to the different values of a multi-valued variable. Proposition 3 Let PM be the translation of a STRIPS problem P under a translation method M that satisﬁes the domain compatibility assumption. If X is a multi-valued variable of PM with domain DX , in the planning graph all pairs of facts of the from X(vi ), X(vj ), with vi , vj ∈ DX and i = j, are mutex in all its levels where they both appear. Proof We prove the claim inductively on planning graph levels. Base case. Assume that both X(vi ) and X(vj ) appear on (fact) level 1 of the planning graph. We prove that they are marked as mutually exclusive by Graphplan. Suppose ﬁrst that one of X(vi ) and X(vj ), say X(vi ), appears in the initial state (fact level 0). Since X(vj ) appears on v v level 1, there must be some actions A1j , . . . Anj such that vj vj v X(vj ) ∈ add(Ac ) and X(vi ) ∈ del(Ac ) ∩ pre(Ac j ), for 1 ≤ c ≤ n. On the other hand, X(vi ) appears on level 1 because of noopX(vi ). Observe that noopX(vi ) is mutex with v all actions Ac j in the preceding action level, and therefore (X(vi ), X(vj )) are also mutex. Assume now that X(vt ) appears in the initial state, and therefore, by the domain compatibility assumption, none of

156

X(vi ) and X(vj ) does. Then, there must be two sets of v v actions, A1j , . . . Anj and Avi , . . . Avi , such that X(vj ) ∈ m 1 vj v v add(Ac ), X(vt ) ∈ del(Ac j ) ∩ pre(Ac j ), for 1 ≤ c ≤ n, vi and X(vi ) ∈ add(Ad ), X(vt ) ∈ del(Avi ) ∩ pre(Avi ), for d d v 1 ≤ d ≤ m. Observe that every action Ac j deletes X(vt ) which is a precondition of all actions Avi . Therefore, every d v action Ac j is mutex with every action Avi . Hence, X(vi ) d and X(vj ) are also mutex at fact level 1. Inductive hypothesis. Assume that for some planning graph level k, Graphplan marks as mutex all pairs of facts of the form X(vi ), X(vj ), with vi , vj ∈ DX . Inductive step. We prove that the same holds for graph level k + 1 for all pairs of facts of the from X(vi ), X(vj ), with vi , vj ∈ DX . Let Avi be an action such that X(vi ) ∈ c v v add(Avi ), and Adj an action such that X(vj ) ∈ add(Adj ). c By the domain compatibility assumption, there are facts v X(vc ) ∈ del(Avi ) ∩ pre(Avi ), X(vd ) ∈ del(Adj ) ∩ c c vj pre(Ad ), with vc , vd ∈ DX . Assume ﬁrst that vc = vd . From the inductive hypothesis we know that X(vc ), X(vd ) v are mutex at fact level k, therefore actions Avi and Adj are c mutex at action level k. On the other hand, if vc = vd , then v v pre(Avi ) ∩ del(Adj ) = ∅, therefore Avi and Adj are again c c v vi mutex. Therefore, any pair of actions Ac and Adj that add X(vi ) and X(vj ) respectively are mutex at level k. Hence, X(vi ), X(vj ) are mutex at level k + 1. A similar result can be proven (the proof is omitted) for actions that have multi-valued variables in their add effects. Proposition 4 Let PM be the translation of a STRIPS problem P under a translation method M that satisﬁes the domain compatibility assumption. If X is a multi-valued variable of PM with domain DX , in the planning graph all pairs of action Ai , Aj (including noops) such that X(vi ) ∈ add(Ai ), X(vj ) ∈ add(Aj ), for vi , vj ∈ DX , are mutex in all its levels where they both appear. In the rest of the paper we assume that londex constraints are generated from the multi-valued representation of a planning domain by a translation method that satisﬁes the domain compatibility assumption. Moreover, we assume that londex constraints are translated into clauses in a straightforward manner, i.e. a Class A action londex on actions A1 and A2 translates into a set of binary clauses ¬A1 (T ) ∨ ¬A2 (T + 1) for all valid points.

consider them. For the other type of Class A londex constraints, we show below that they are forward UP-redundant wrt the the SATPLAN06-4 model, which we refer to as SATPLAN06 encodings. Proposition 5 Let A1 , A2 be actions and f a fact of a planning problem P such that f ∈ del(A1 ) and f ∈ pre(A2 ). The set of clauses ¬A1 (T )∨¬A2 (T +1), for all valid points T , is forward UP-redundant wrt the SATPLAN06 encoding of the problem. Proof Let TP be the SATPLAN06 encoding of a problem P . We prove that ¬A2 (T + 1) ∈ U P (TP ∪ {A1 (T )}). Let Af , Af , . . . , Af be the actions that contain f in their add 1 2 k effects (including noop). Theory TP contains the clauses 1. ¬A2 (T + 1) ∨ f (T + 1) 2. ¬f (T + 1) ∨ Af (T ) ∨ Af (T ) ∨ . . . ∨ Af (T ) 1 2 k 3. A set of binary clauses of the form ¬A1 (T ) ∨ ¬Af (T ), i 1 ≤ i ≤ k. From A1 (T ) and the set of clauses (3) above, UP derives the set of unit clauses ¬Af (T ), 1 ≤ i ≤ k From these i clauses and clause (2), UP entails the unit clause ¬f (T + 1) and from clause (1) ¬A2 (T + 1). Therefore ¬A2 (T + 1) ∈ U P (T ∪ {A1 (T )}). We investigate now long distance constraints for facts, and show that they are also forward UP-redundant wrt to the SATPLAN06 encoding. Proposition 6 Let X be a multi-valued variable of a planning problem P with domain DX , and TP the SATPLAN06 encoding of P . Then, for any two values vi , vj ∈ DX and k ≥ 0 such that ΔGX (vi , vj ) > k, the set of clauses ¬X(vj , T + k) ∨ ¬X(vi , T ) is forward UP-redundant wrt to TP for all valid time points T . Proof We prove inductively on k that ¬X(vj , T + k) ∈ U P (TP ∪ {X(vi , T )}) for all vj s.t. ΔGX (vi , vj ) > k. Moreover, we show within the same inductive proof, that ¬Aj (T + k) ∈ U P (TP ∪ {X(vi , T )}) for all actions Aj such that X(vj ) ∈ pre(Aj ) and ΔGX (vi , vj ) > k. Base case. We prove that the theorem holds for k = 0, that is, if ΔGX (vi , vj ) > 0, ¬X(vj , T ) ∈ U P (TP ∪ {X(vi , T )}). First note that ΔGX (vi , vj ) > 0 holds for all vi , vj ∈ DX , j = i. By proposition 3, TP contains the clauses ¬X(vi , T ) ∨ ¬X(vj , T ), for all vi , vj ∈ DX , j = i. Therefore, ¬X(vj , T ) ∈ U P (TP ∪ {X(vi , T )}). Furthermore, if Aj is an action such that X(vj ) ∈ pre(Aj ), then TP contains the clause ¬Aj (T ) ∨ X(vj , T ). From this clause and ¬X(vj , T ) ∈ U P (TP ∪ {X(vi , T )}), we conclude that ¬Aj (T ) ∈ U P (TP ∪ {X(vi , T )}). Inductive hypothesis. Assume that for some k ≥ 0, ¬X(vj , T + k) ∈ U P (TP ∪ {X(vi , T )}) holds for all facts X(vj ) such that ΔGX (vi , vj ) > k. Furthermore, ¬Aj (T + k) ∈ U P (TP ∪ {X(vi , T )}) for all actions Aj such that X(vj ) ∈ pre(Aj ) and ΔGX (vi , vj ) > k. Inductive step. We prove ﬁrst that ¬X(vj , T + k + 1) ∈ U P (TP ∪ {X(vi , T )}) holds for all facts X(vj ) such that

Londex propagation in SATPLAN06
In the following we analyze the effects of various londex constraints on the constraint propagation of a UP based SAT solver. A clause of the form ¬p(T ) ∨ ¬q(T + k) that corresponds to a londex constraint of a planning problem P is forward UP-redundant wrt to an encoding TP of P if ¬q(T + k) ∈ U P (TP ∪ {p(T )}). Similarly, the clause is backward UP-redundant wrt to TP if ¬p(T ) ∈ U P (TP ∪ {q(T + k)}). We start by analyzing the effects of londex constraints of Class A. This class contains constraints that refer to actions that cannot be executed in parallel, as well as constraints that relate actions that are one time step apart. Note that action mutexes that refer to the same time point are included in SATPLAN06 encoding, therefore we do not

157

ΔGX (vi , vj ) > k + 1. Let Aj , Aj , . . . , Aj be the actions m 1 2 that have X(vj ) in their add effects. Then TP contains the clause ¬X(vj , T + k + 1)∨Aj (T + k)∨Aj (T + k)∨. . .∨Aj (T + m 1 2 k) ∨ noopX(vj , T + k). Since ΔGX (vi , vj ) > k + 1, implies ΔGX (vi , vj ) > k, by the inductive hypothesis ¬X(vj , T + k) ∈ From this and the binary U P (TP ∪ {X(vi , T )}). clause ¬noopX(vj , T + k) ∨ X(vj , T + k) we conclude ¬noopX(vj , T + k) ∈ U P (TP ∪ {X(vi , T )}). Assume now that there is some action Aj , for 1 ≤ c ≤ m, such that c ¬Aj (T + k) ∈ U P (TP ∪ {X(vi , T )}), and let X(vb ), vb ∈ c DX , be a precondition of Aj . Then, it can not be the case c that ΔGX (vi , vb ) > k, because then, by the induction hypothesis, ¬Aj (T + k) ∈ U P (TP ∪ {X(vi , T )}). Therefore, c ΔGX (vi , vb ) ≤ k. Then there must exist a path in GX from vi to vb of length at most k, and a arc from vb to vj , therefore ΔGX (vi , vj ) ≤ k+1. However, this contradicts the assumption ΔGX (vi , vj ) > k+1. Therefore, it must be the case that ¬Aj (T + k) ∈ U P (TP ∪ {X(vi , T )}), for all 1 ≤ c ≤ m. c Hence, ¬X(vj , T + k + 1) ∈ U P (TP ∪ {X(vi , T )}). We now prove that ¬Aj (T + k + 1) ∈ U P (TP ∪ {X(vi , T )}) for all actions Aj such that X(vj ) ∈ pre(Aj ) and ΔGX (vi , vj ) > k + 1. From the ﬁrst part of the proof we know that ¬X(vj , T + k + 1) ∈ U P (TP ∪ {X(vi , T )}). Moreover, theory TP contains the clause ¬Aj (T + k + 1) ∨ X(vj , T + k + 1). Therefore, ¬Aj (T + k + 1) ∈ U P (TP ∪ {X(vi , T )}). This completes the proof. The results that follow show that all forms of Class B action londex constraints are forward UP-redundant. The proofs of these propositions give some insight into the propagation taking place in a UP-based SAT solver, and are provided only for two of them. Proposition 7 Let X be a multi-valued variable of a planning problem P with domain DX , TP the SATPLAN06 encoding of P , and v1 , v2 ∈ DX such that ΔGX (v1 , v2 ) > k. If A1 , A2 are actions such that X(v1 ) ∈ pre(A1 ) and X(v2 ) ∈ pre(A2 ), then the set of clauses ¬A2 (T + k) ∨ ¬A1 (T ) is forward UP-redundant wrt to TP for all valid time points. Proof We show that ¬A2 (T + k) ∈ U P (TP ∪ {A1 (T )}). Theory TP contains the clauses ¬A1 (T ) ∨ X(v1 , T ) and ¬A2 (T + k) ∨ X(v2 , T + k). Therefore, X(v1 , T ) ∈ U P (TP ∪ {A1 (T )}). By proposition 6, ¬X(v2 , T + k) ∈ U P (TP ∪ {X(v1 , T )}, and therefore ¬X(v2 , T + k) ∈ U P (TP ∪{A1 (T )}). By the clause ¬A2 (T +k)∨X(v2 , T + k), we obtain ¬A2 (T + k) ∈ U P (TP ∪ {A1 (T )}). Proposition 8 Let X be a multi-valued variable of a planning problem P with domain DX , TP the SATPLAN06 encoding of P , and v1 , v2 ∈ DX such that ΔGX (v1 , v2 ) > k. If A1 , A2 are actions such that X(v1 ) ∈ add(A1 ) and X(v2 ) ∈ add(A2 ), then the set of clauses ¬A2 (T + k) ∨ ¬A1 (T ) is forward UP-redundant wrt to TP for all valid time points. Proof We prove inductively on k that ¬A2 (T + k) ∈ U P (TP ∪ {A1 (T )}) for any pair of actions A1 , A2 such

that X(v1 ) ∈ add(A1 ) and X(v2 ) ∈ add(A2 ) and ΔGX (v1 , v2 ) > k. Base case: We prove ﬁrst the case k = 0. Note that ΔGX (v1 , v2 ) > 0 for all v1 , v2 ∈ DX , j = i. Therefore, we must show that ¬A2 (T ) ∈ U P (TP ∪ {A1 (T )}) for any pair of actions A1 , A2 such that X(v1 ) ∈ add(A1 ) and X(v2 ) ∈ add(A2 ) with v1 = v2 . Assume ﬁrst that X(vp ) ∈ pre(A1 ) ∩ pre(A2 ) for vp ∈ DX . Then X(vp ) ∈ del(A1 ) ∩ del(A2 ), therefore ¬A2 (T ) ∨ ¬A1 (T ) ∈ TP . As1 2 sume now that X(vp ) ∈ pre(A1 ) and X(vp ) ∈ pre(A2 ) 1 2 1 2 with vp , vp ∈ DX and vp = vp . Theory TP contains 2 1 the clauses ¬A2 (T ) ∨ X(vp , T ) and ¬A1 (T ) ∨ X(vp , T ). 1 By proposition 3, it also contains the clause ¬X(vp , T ) ∨ 2 ¬X(vp , T ). From these clauses it follows that ¬A2 (T ) ∈ U P (TP ∪ {A1 (T )}). Inductive hypothesis. Assume that for some k ≥ 0, ¬A2 (T + k) ∈ U P (TP ∪ {A1 (T )}) holds for all pairs of actions A1 , A2 such that X(v1 ) ∈ add(A1 ) and X(v2 ) ∈ add(A2 ) and ΔGX (v1 , v2 ) > k. Inductive step: We prove that ¬A2 (T + k + 1) ∈ U P (TP ∪ {A1 (T )}) holds for all pairs of actions A1 , A2 such that X(v1 ) ∈ add(A1 ) and X(v2 ) ∈ add(A2 ) and 2 2 ΔGX (v1 , v2 ) > k + 1. Let vp ∈ pre(A2 ) with vp ∈ DX , pc and let A2 , 1 ≤ c ≤ n, be the set of actions that have 2 2 X(vp ) in their add effects. Clearly, ΔGX (v1 , vp ) > k. pc From the inductive hypothesis we know that ¬A2 (T + k) ∈ U P (TP ∪ {A1 (T )}) for all 1 ≤ c ≤ n. Theory TP contains 2 the clause ¬X(vp , T + k + 1) ∨ Ap1 (T + k) ∨ . . . ∨ Apn (T + 2 2 2 k) ∨ noop(vp , T + k). 2 We prove now that ¬noop(vp , T +k) ∈ U P (TP ∪{A1 (T )}). 1 1 Let vp ∈ pre(A1 ) with vp ∈ DX and assume ﬁrst that 1 2 1 vp = vp . First note that X(vp , T ) ∈ U P (TP ∪ {A1 (T )}) 2 and assume that ¬X(vp , T + k) ∈ U P (TP ∪ {A1 (T )}), 2 1 therefore ¬X(vp , T + k) ∈ U P (TP ∪ {X(vp , T )}). By 1 2 proposition 3 this means that ΔGX (vp , vp ) ≤ k, which implies ΔGX (v1 , v2 ) ≤ k, contradicting the assumption that 2 ΔGX (v1 , v2 ) > k + 1. Hence, ¬X(vp , T + k) ∈ U P (TP ∪ 2 {A1 (T )}). From this and the clause ¬noop(vp , T + k) ∨ 2 2 X(vp , T + k) we obtain ¬noop(vp , T + k) ∈ U P (TP ∪ 1 2 {A1 (T )}). Similar arguments hold in the case vp = vp . 2 From the above analysis we conclude that ¬X(vp , T + k + 1) ∈ U P (TP ∪ {A1 (T )}). From this, and the clause 2 ¬A2 (T + k + 1) ∨ X(vp , T + k + 1) we obtain ¬A2 (T + k + 1) ∈ U P (TP ∪ {A1 (T )}). Analogous results can be proven for the other two types of Class B londex constraints. Proposition 9 Let X be a multi-valued variable of a planning problem P with domain DX , TP the SATPLAN06 encoding of P , and v1 , v2 ∈ DX such that ΔGX (v1 , v2 ) > k. Then, the following sets of clauses are forward UPredundant wrt to TP for all valid time points. 1. ¬A2 (T + k) ∨ ¬A1 (T − 1), for A1 , A2 such that X(v1 ) ∈ add(A1 ) and X(v2 ) ∈ pre(A2 ).

158

2. ¬A2 (T + k − 1) ∨ ¬A1 (T ), for A1 , A2 such that X(v1 ) ∈ pre(A1 ) and X(v2 ) ∈ add(A2 ). Since BB-31 ≥SUP SATPLAN06, the same results hold for the BLACKBOX encoding. However, it can be shown that BLACKBOX encoding can not propagate backwards some of the mutex constraints (details regarding this issue can be found in an extended version of the paper). Therefore, londex constraints increase propagation in both SATPLAN06 and BLACKBOX encodings.

X(v2n , T + 1), . . . , ¬Av2n2n (T ) ∨ X(v2n , T + 1), giving mv {¬Av21 (T ), . . . , ¬Av2n2n (T )} ⊆ U P (TP ∪ {X(v2 , T + mv 1 k + 1)}). Hence the clause ¬X(v1 , T ) ∨ X(v1 , T + 1) ∨ Av21 (T )∨. . .∨Av2121 (T )∨. . .∨Av2n (T )∨. . .∨Av2n2n (T ) mv mv 1 1 is resolved to the binary clause ¬X(v1 , T ) ∨ X(v1 , T + 1). But because ΔGX (v1 , v2 ) > k (since ΔGX (v1 , v2 ) > k+1), by the inductive hypothesis it holds that ¬X(v1 , T + 1) ∈ U P (TP ∪ {X(v2 , T + k + 1)}), which further resolves the binary clause ¬X(v1 , T ) ∨ X(v1 , T + 1) to ¬X(v1 , T ). Based on proposition 10, we can prove that all six categories of action londexes are backward UP-redundant. By combining the results of this and the previous section, we obtain the following property for the SATPLANmax encoding. Theorem 1 Let P be STRIPS planning domain and TP its SATPLANmax encoding. All clauses that correspond to londex constraints derived from P are UP-redundant wrt TP . Note that the above result holds for SMP as well, as it is a simpliﬁcation of SATPLANmax obtained by removing UPredundant clauses.

Londex Propagation in SATPLANmax
In this section we prove that in the SATPLANmax encoding all londex constraints are UP-redundant in both directions, forward and backwards. It was proved earlier that (clauses that correspond to) londexes are forward UP-redundant in the SATPLAN06 encoding. Since SAT P LAN max >SUP SAT P LAN 06, londexes are forward UP-redundant in SATPLANmax as well. Proposition 10 Let X be a multi-valued variable of a planning problem P with domain DX , TP the SAT P LAN max encoding of P , and v1 , v2 ∈ DX such that ΔGX (v1 , v2 ) > k. The set of clauses ¬X(v2 , T + k) ∨ ¬X(v1 , T ) is backward UP-redundant wrt to TP , for all valid time points. Proof We prove inductively on k that ¬X(v1 , T ) ∈ U P (TP ∪ {X(v2 , T + k)}). Base case. For k = 0, it follows form proposition 3 that X(v1 ) and X(v2 ) are marked mutually exclusive on all planning graph levels, therefore TP contains the clause ¬X(v2 , T ) ∨ ¬X(v1 , T ). Hence ¬X(v1 , T ) ∈ U P (TP ∪ {X(v2 , T )}). Inductive hypothesis. Assume that for any pair of facts X(v1 ), X(v2 ) and some k ≥ 0 with ΔGX (v1 , v2 ) > k, it holds that ¬X(v1 , T ) ∈ U P (TP ∪ {X(v2 , T + k)}). Inductive step. We show that for any pair of facts X(v1 ), X(v2 ) with ΔGX (v1 , v2 ) > k + 1, it holds that ¬X(v1 , T ) ∈ U P (TP ∪ {X(v2 , T + k + 1)}). By the deﬁnition of the DTG, in the GX = (V, E) containing variables X(v1 ) and X(v2 ) with ΔGX (v1 , v2 ) > k + 1, there exist (other) variables X(v21 ), X(v22 ), . . . , X(v2n ) such that {(X(v1 ), X(v21 )), . . . , (X(v1 ), X(v2n ))} ⊂ E, ΔGX (v1 , vi ) = 1 and ΔGX (vi , v2 ) > k for X(vi ) ∈ {X(v21 ), X(v22 ), . . . , X(v2n )}. For any variable X(vi ) ∈ {X(v21 ), X(v22 ), . . . , X(v2n )}, there is an associated set of actions {Avi , Avi , . . . , Avi v } each one having X(vi ) m i 1 2 as an add effect, and X(v1 ) as a precondition and delete effect. It holds that {¬Av21 (T ) ∨ X(v21 , T + 1 1), . . . , ¬Av2121 (T ) ∨ X(v21 , T + 1), . . . , ¬Av2n (T ) ∨ mv 1 X(v2n , T + 1), . . . , ¬Av2n2n (T ) ∨ X(v2n , T + 1)} ⊂ mv TP and {¬X(v1 , T ) ∨ X(v1 , T + 1) ∨ Av21 (T ) ∨ . . . ∨ 1 Av2121 (T ) ∨ . . . ∨ Av2n (T ) ∨ . . . ∨ Av2n2n (T )} ⊂ TP . mv mv 1 Since ∀X(vi ) ∈ {X(v21 ), X(v22 ), . . . , X(v2n )} holds that ΔGX (vi , v2 ) > k by the inductive hypothesis it holds that {¬X(v21 , T + 1), ¬X(v22 , T + 1), . . . , ¬X(v2n , T + 1)} ⊆ U P (TP ∪ {X(v2 , T + k + 1)}), which are further (unit) resolved with the binary clauses ¬Av21 (T ) ∨ X(v21 , T + 1 1), . . . , ¬Av2121 (T ) ∨ X(v21 , T + 1), . . . , ¬Av2n (T ) ∨ mv 1

Experimental evaluation
In this section we present the results of the experimental comparison of various encodings discussed earlier, in domains from the last planning competitions. Our implementation is an extension of the SATPLAN06 system with new encodings for BLACKBOX and SMP as well as the integration of precosat. Hence, all experiments are runs of the same system with different values for the parameters encoding and solver. The experiments were run on an IBM X3650 with Intel Xeon processors at 2.0 GHz and 32GB of RAM, running under CentOS 5.2. Table 1 presents the number of problems solved with different combinations of encodings and SAT solvers, within a CPU time limit of 2500 seconds. The encodings compared are SATPLAN06 (encoding SATPLAN064), BLACKBOX (encoding BB-31), and SMP. The SAT solvers that are used are siege (Ryan 2003) and precosat (Biere 2009) version 236, a new system that seems to outperform Siege and many other solvers that we have tested on a large number of planning domains. In Table 1 (as well as Table 2) SATPLAN06 is denoted by SP, BLACKBOX by BB, whereas siege by SI and precosat by PR. The entries under ”Problems” in Table 1 are of the form p/q, where p is the total number of problems contained in each domain, and q the number of problems for which either one of the methods found a solution, or they all reached their CPU limit and terminated without a solution. Hence, p − q is the number of problems that were not solved by any of the systems due to memory problems at parsing or solving time. Table 2 presents characteristic run times of different encodings on some of the hardest problems that have been solved by both BLACKBOX and SMP. All times were obtained with precosat as the underlying SAT solver, and a CPU time limit of 3600 seconds.

159

Domain Depots DriveLog Zenotravel Freecell Satellite Pathways Trucks Pipes Storage TPP Elevators ScanAnalyser Sokoban Transport Total

Problems 22/22 20/20 20/19 20/20 36/24 30/30 30/30 50/31 30/30 30/30 30/30 30/23 30/30 30/21 408/360

SP-SI 16 16 15 4 17 9 5 17 15 27 9 17 2 11 180

BB-SI 16 16 15 4 17 9 6 23 15 28 9 17 2 11 188

SMP-SI 18 16 16 6 17 10 8 23 15 28 12 19 4 12 204

SP-PR 17 17 15 5 17 12 7 15 15 28 12 15 2 11 188

BB-PR 17 17 15 5 18 12 7 24 15 29 13 16 5 11 204

SMP-PR 19 17 16 6 18 16 11 27 16 29 14 18 7 13 227

Table 1: Number of problems solved by each encoding in different domains. Domain-Problem Depots-11 DriveLog-16 Zenotravel-15 Pathways-17 Trucks-8 TPP-21 Pipes-12 Transport-4 Sokoban-13 Elevator-21 ScanAnalyser-8 SMP 176 897 84 971 161 1580 189 81 474 2099 59 BB 1674 1156 307 980 637 1908 348 312 1869 2424 208 SP 2134 2453 383 1940 1140 2554 1429 563 codings, the new londex constraints of (Chen et al. 2009), and the propagation in the split action model of (Robinson et al. 2009).

References
Biere, A. 2009. P{re,ic}oSAT@SC’09. In SAT Competition 2009, http://fmv.jku.at/precosat/. Blum, A., and Furst, M. L. 1997. Fast planning through planning graph analysis. Artif. Intell. 90(1-2):281–300. Chen, Y.; Huang, R.; Xing, Z.; and Zhang, W. 2009. Longdistance mutual exclusion for planning. Artif. Intell. 173(2). Chen, Y.; Xing, Z.; and Zhang, W. 2007. Long-distance mutual exclusion for propositional planning. In IJCAI, 1840– 1845. Een, N., and Sorensson, N. 2003. An extensible sat-solver. In SAT 2003. Geffner, H. 2004. Planning graphs and knowledge compilation. In ICAPS, 52–62. Helmert, M. 2009. Concise ﬁnite-domain representations for PDDL planning tasks. Artif. Intell. 173(5-6):503–535. Kautz, H. A., and Selman, B. 1999. Unifying sat-based and graph-based planning. In IJCAI, 318–325. Kautz, H. A.; Selman, B.; and Hoffmann, J. 2006. SATPLAN: Planning as satisﬁability. In Booklet of the 5th Planning Competition. Rintanen, J. 2008. Planning graphs and propositional clause-learning. In KR, 535–543. Robinson, N.; Gretton, C.; Pham, D. N.; and Sattar, A. 2009. SAT-based parallel planning using a split representation of actions. In ICAPS. Ryan, L. 2003. Efﬁcient algorithms for clause-learning sat solvers. In M.Sc. Thesis, Simon Fraser University.

Table 2: Run times in seconds for different encodings of problems. A dash indicates CPU timeout. The relative performance of the different encodings, as depicted in Tables 1 and 2, is consistent with the theoretical results obtained in earlier sections. Indeed, BLACKBOX outperforms SATPLAN06, whereas SMP dominates all other encodings. Moreover, solution times improve when precosat instead of siege is used as the SAT solver.

Conclusions
In this work we compared different encodings of planning as satisﬁability wrt to the propagation they achieve in a modern SAT solver. Our theoretical results explain some of the differences observed in the performance of various planners. One interesting ﬁnding is that BLACKBOX encoding is stronger than the one of SATPLAN06. Thus, new encodings of planning as satisﬁability need to be compared with both systems. Another practical outcome of our results is SMP, a new encoding that renders londex constraint redundant, and seems to offer performance improvements in a number of domains. Our ongoing work includes the study of action based en-

160

